# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from kemy.auth import auth_pb2 as kemy_dot_auth_dot_auth__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in kemy/auth/auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/kemy.auth.Auth/CreateUser',
                request_serializer=kemy_dot_auth_dot_auth__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.VerifyChallenge = channel.unary_unary(
                '/kemy.auth.Auth/VerifyChallenge',
                request_serializer=kemy_dot_auth_dot_auth__pb2.VerifyChallengeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateNewPin = channel.unary_unary(
                '/kemy.auth.Auth/CreateNewPin',
                request_serializer=kemy_dot_auth_dot_auth__pb2.CreatePinRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.LoginUser = channel.unary_unary(
                '/kemy.auth.Auth/LoginUser',
                request_serializer=kemy_dot_auth_dot_auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/kemy.auth.Auth/GetUser',
                request_serializer=kemy_dot_auth_dot_auth__pb2.GetUserRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.User.FromString,
                _registered_method=True)
        self.GetUserByMobile = channel.unary_unary(
                '/kemy.auth.Auth/GetUserByMobile',
                request_serializer=kemy_dot_auth_dot_auth__pb2.GetUserByMobileRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.User.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/kemy.auth.Auth/UpdateUser',
                request_serializer=kemy_dot_auth_dot_auth__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.User.FromString,
                _registered_method=True)
        self.GenerateChallenge = channel.unary_unary(
                '/kemy.auth.Auth/GenerateChallenge',
                request_serializer=kemy_dot_auth_dot_auth__pb2.ChallengeRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/kemy.auth.Auth/ListUsers',
                request_serializer=kemy_dot_auth_dot_auth__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.ListUsersResponse.FromString,
                _registered_method=True)
        self.GetNewAccessToken = channel.unary_unary(
                '/kemy.auth.Auth/GetNewAccessToken',
                request_serializer=kemy_dot_auth_dot_auth__pb2.GetNewAccessTokenRequest.SerializeToString,
                response_deserializer=kemy_dot_auth_dot_auth__pb2.GetNewAccessTokenResponse.FromString,
                _registered_method=True)


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNewPin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByMobile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.CreateUserRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.CreateUserResponse.SerializeToString,
            ),
            'VerifyChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyChallenge,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.VerifyChallengeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateNewPin': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNewPin,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.CreatePinRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.LoginRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.LoginResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.GetUserRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.User.SerializeToString,
            ),
            'GetUserByMobile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByMobile,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.GetUserByMobileRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.User.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.UpdateUserRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.User.SerializeToString,
            ),
            'GenerateChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateChallenge,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.ChallengeRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.ListUsersRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.ListUsersResponse.SerializeToString,
            ),
            'GetNewAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewAccessToken,
                    request_deserializer=kemy_dot_auth_dot_auth__pb2.GetNewAccessTokenRequest.FromString,
                    response_serializer=kemy_dot_auth_dot_auth__pb2.GetNewAccessTokenResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kemy.auth.Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('kemy.auth.Auth', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/CreateUser',
            kemy_dot_auth_dot_auth__pb2.CreateUserRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/VerifyChallenge',
            kemy_dot_auth_dot_auth__pb2.VerifyChallengeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateNewPin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/CreateNewPin',
            kemy_dot_auth_dot_auth__pb2.CreatePinRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/LoginUser',
            kemy_dot_auth_dot_auth__pb2.LoginRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/GetUser',
            kemy_dot_auth_dot_auth__pb2.GetUserRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserByMobile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/GetUserByMobile',
            kemy_dot_auth_dot_auth__pb2.GetUserByMobileRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/UpdateUser',
            kemy_dot_auth_dot_auth__pb2.UpdateUserRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/GenerateChallenge',
            kemy_dot_auth_dot_auth__pb2.ChallengeRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/ListUsers',
            kemy_dot_auth_dot_auth__pb2.ListUsersRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNewAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/kemy.auth.Auth/GetNewAccessToken',
            kemy_dot_auth_dot_auth__pb2.GetNewAccessTokenRequest.SerializeToString,
            kemy_dot_auth_dot_auth__pb2.GetNewAccessTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
